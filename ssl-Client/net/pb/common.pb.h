// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace fira_message {
namespace sim_to_ref {
class Ball;
class BallDefaultTypeInternal;
extern BallDefaultTypeInternal _Ball_default_instance_;
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Commands;
class CommandsDefaultTypeInternal;
extern CommandsDefaultTypeInternal _Commands_default_instance_;
class Environment;
class EnvironmentDefaultTypeInternal;
extern EnvironmentDefaultTypeInternal _Environment_default_instance_;
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
}  // namespace sim_to_ref
}  // namespace fira_message
PROTOBUF_NAMESPACE_OPEN
template<> ::fira_message::sim_to_ref::Ball* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Ball>(Arena*);
template<> ::fira_message::sim_to_ref::Command* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Command>(Arena*);
template<> ::fira_message::sim_to_ref::Commands* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Commands>(Arena*);
template<> ::fira_message::sim_to_ref::Environment* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Environment>(Arena*);
template<> ::fira_message::sim_to_ref::Field* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Field>(Arena*);
template<> ::fira_message::sim_to_ref::Frame* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Frame>(Arena*);
template<> ::fira_message::sim_to_ref::Packet* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Packet>(Arena*);
template<> ::fira_message::sim_to_ref::Robot* Arena::CreateMaybeMessage<::fira_message::sim_to_ref::Robot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fira_message {
namespace sim_to_ref {

// ===================================================================

class Ball PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Ball) */ {
 public:
  inline Ball() : Ball(nullptr) {};
  virtual ~Ball();

  Ball(const Ball& from);
  Ball(Ball&& from) noexcept
    : Ball() {
    *this = ::std::move(from);
  }

  inline Ball& operator=(const Ball& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ball& operator=(Ball&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ball& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ball* internal_default_instance() {
    return reinterpret_cast<const Ball*>(
               &_Ball_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ball& a, Ball& b) {
    a.Swap(&b);
  }
  inline void Swap(Ball* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ball* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ball* New() const final {
    return CreateMaybeMessage<Ball>(nullptr);
  }

  Ball* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ball>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ball& from);
  void MergeFrom(const Ball& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ball* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Ball";
  }
  protected:
  explicit Ball(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVxFieldNumber = 4,
    kVyFieldNumber = 5,
    kVzFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double vx = 4;
  void clear_vx();
  double vx() const;
  void set_vx(double value);
  private:
  double _internal_vx() const;
  void _internal_set_vx(double value);
  public:

  // double vy = 5;
  void clear_vy();
  double vy() const;
  void set_vy(double value);
  private:
  double _internal_vy() const;
  void _internal_set_vy(double value);
  public:

  // double vz = 6;
  void clear_vz();
  double vz() const;
  void set_vz(double value);
  private:
  double _internal_vz() const;
  void _internal_set_vz(double value);
  public:

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Ball)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double vx_;
  double vy_;
  double vz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Robot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Robot) */ {
 public:
  inline Robot() : Robot(nullptr) {};
  virtual ~Robot();

  Robot(const Robot& from);
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Robot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(nullptr);
  }

  Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Robot";
  }
  protected:
  explicit Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kVxFieldNumber = 5,
    kVyFieldNumber = 6,
    kVorientationFieldNumber = 7,
    kRobotIdFieldNumber = 1,
  };
  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double orientation = 4;
  void clear_orientation();
  double orientation() const;
  void set_orientation(double value);
  private:
  double _internal_orientation() const;
  void _internal_set_orientation(double value);
  public:

  // double vx = 5;
  void clear_vx();
  double vx() const;
  void set_vx(double value);
  private:
  double _internal_vx() const;
  void _internal_set_vx(double value);
  public:

  // double vy = 6;
  void clear_vy();
  double vy() const;
  void set_vy(double value);
  private:
  double _internal_vy() const;
  void _internal_set_vy(double value);
  public:

  // double vorientation = 7;
  void clear_vorientation();
  double vorientation() const;
  void set_vorientation(double value);
  private:
  double _internal_vorientation() const;
  void _internal_set_vorientation(double value);
  public:

  // uint32 robot_id = 1;
  void clear_robot_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id() const;
  void set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_robot_id() const;
  void _internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Robot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double orientation_;
  double vx_;
  double vy_;
  double vorientation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 robot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Field PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Field) */ {
 public:
  inline Field() : Field(nullptr) {};
  virtual ~Field();

  Field(const Field& from);
  Field(Field&& from) noexcept
    : Field() {
    *this = ::std::move(from);
  }

  inline Field& operator=(const Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline Field& operator=(Field&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Field* internal_default_instance() {
    return reinterpret_cast<const Field*>(
               &_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Field& a, Field& b) {
    a.Swap(&b);
  }
  inline void Swap(Field* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Field* New() const final {
    return CreateMaybeMessage<Field>(nullptr);
  }

  Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Field& from);
  void MergeFrom(const Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Field";
  }
  protected:
  explicit Field(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kLengthFieldNumber = 2,
    kGoalWidthFieldNumber = 3,
    kGoalDepthFieldNumber = 4,
  };
  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double length = 2;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double goal_width = 3;
  void clear_goal_width();
  double goal_width() const;
  void set_goal_width(double value);
  private:
  double _internal_goal_width() const;
  void _internal_set_goal_width(double value);
  public:

  // double goal_depth = 4;
  void clear_goal_depth();
  double goal_depth() const;
  void set_goal_depth(double value);
  private:
  double _internal_goal_depth() const;
  void _internal_set_goal_depth(double value);
  public:

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Field)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double width_;
  double length_;
  double goal_width_;
  double goal_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {};
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotsYellowFieldNumber = 2,
    kRobotsBlueFieldNumber = 3,
    kBallFieldNumber = 1,
  };
  // repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
  int robots_yellow_size() const;
  private:
  int _internal_robots_yellow_size() const;
  public:
  void clear_robots_yellow();
  ::fira_message::sim_to_ref::Robot* mutable_robots_yellow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
      mutable_robots_yellow();
  private:
  const ::fira_message::sim_to_ref::Robot& _internal_robots_yellow(int index) const;
  ::fira_message::sim_to_ref::Robot* _internal_add_robots_yellow();
  public:
  const ::fira_message::sim_to_ref::Robot& robots_yellow(int index) const;
  ::fira_message::sim_to_ref::Robot* add_robots_yellow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
      robots_yellow() const;

  // repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
  int robots_blue_size() const;
  private:
  int _internal_robots_blue_size() const;
  public:
  void clear_robots_blue();
  ::fira_message::sim_to_ref::Robot* mutable_robots_blue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
      mutable_robots_blue();
  private:
  const ::fira_message::sim_to_ref::Robot& _internal_robots_blue(int index) const;
  ::fira_message::sim_to_ref::Robot* _internal_add_robots_blue();
  public:
  const ::fira_message::sim_to_ref::Robot& robots_blue(int index) const;
  ::fira_message::sim_to_ref::Robot* add_robots_blue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
      robots_blue() const;

  // .fira_message.sim_to_ref.Ball ball = 1;
  bool has_ball() const;
  private:
  bool _internal_has_ball() const;
  public:
  void clear_ball();
  const ::fira_message::sim_to_ref::Ball& ball() const;
  ::fira_message::sim_to_ref::Ball* release_ball();
  ::fira_message::sim_to_ref::Ball* mutable_ball();
  void set_allocated_ball(::fira_message::sim_to_ref::Ball* ball);
  private:
  const ::fira_message::sim_to_ref::Ball& _internal_ball() const;
  ::fira_message::sim_to_ref::Ball* _internal_mutable_ball();
  public:
  void unsafe_arena_set_allocated_ball(
      ::fira_message::sim_to_ref::Ball* ball);
  ::fira_message::sim_to_ref::Ball* unsafe_arena_release_ball();

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot > robots_yellow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot > robots_blue_;
  ::fira_message::sim_to_ref::Ball* ball_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Command PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Command) */ {
 public:
  inline Command() : Command(nullptr) {};
  virtual ~Command();

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return CreateMaybeMessage<Command>(nullptr);
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kYellowteamFieldNumber = 2,
    kWheelLeftFieldNumber = 6,
    kWheelRightFieldNumber = 7,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool yellowteam = 2;
  void clear_yellowteam();
  bool yellowteam() const;
  void set_yellowteam(bool value);
  private:
  bool _internal_yellowteam() const;
  void _internal_set_yellowteam(bool value);
  public:

  // double wheel_left = 6;
  void clear_wheel_left();
  double wheel_left() const;
  void set_wheel_left(double value);
  private:
  double _internal_wheel_left() const;
  void _internal_set_wheel_left(double value);
  public:

  // double wheel_right = 7;
  void clear_wheel_right();
  double wheel_right() const;
  void set_wheel_right(double value);
  private:
  double _internal_wheel_right() const;
  void _internal_set_wheel_right(double value);
  public:

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool yellowteam_;
  double wheel_left_;
  double wheel_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Commands PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Commands) */ {
 public:
  inline Commands() : Commands(nullptr) {};
  virtual ~Commands();

  Commands(const Commands& from);
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commands& operator=(Commands&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Commands& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(Commands* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return CreateMaybeMessage<Commands>(nullptr);
  }

  Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Commands& from);
  void MergeFrom(const Commands& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Commands";
  }
  protected:
  explicit Commands(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotCommandsFieldNumber = 1,
  };
  // repeated .fira_message.sim_to_ref.Command robot_commands = 1;
  int robot_commands_size() const;
  private:
  int _internal_robot_commands_size() const;
  public:
  void clear_robot_commands();
  ::fira_message::sim_to_ref::Command* mutable_robot_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Command >*
      mutable_robot_commands();
  private:
  const ::fira_message::sim_to_ref::Command& _internal_robot_commands(int index) const;
  ::fira_message::sim_to_ref::Command* _internal_add_robot_commands();
  public:
  const ::fira_message::sim_to_ref::Command& robot_commands(int index) const;
  ::fira_message::sim_to_ref::Command* add_robot_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Command >&
      robot_commands() const;

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Commands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Command > robot_commands_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Packet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {};
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // .fira_message.sim_to_ref.Commands cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  const ::fira_message::sim_to_ref::Commands& cmd() const;
  ::fira_message::sim_to_ref::Commands* release_cmd();
  ::fira_message::sim_to_ref::Commands* mutable_cmd();
  void set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd);
  private:
  const ::fira_message::sim_to_ref::Commands& _internal_cmd() const;
  ::fira_message::sim_to_ref::Commands* _internal_mutable_cmd();
  public:
  void unsafe_arena_set_allocated_cmd(
      ::fira_message::sim_to_ref::Commands* cmd);
  ::fira_message::sim_to_ref::Commands* unsafe_arena_release_cmd();

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fira_message::sim_to_ref::Commands* cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Environment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fira_message.sim_to_ref.Environment) */ {
 public:
  inline Environment() : Environment(nullptr) {};
  virtual ~Environment();

  Environment(const Environment& from);
  Environment(Environment&& from) noexcept
    : Environment() {
    *this = ::std::move(from);
  }

  inline Environment& operator=(const Environment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Environment& operator=(Environment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Environment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Environment* internal_default_instance() {
    return reinterpret_cast<const Environment*>(
               &_Environment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Environment& a, Environment& b) {
    a.Swap(&b);
  }
  inline void Swap(Environment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Environment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Environment* New() const final {
    return CreateMaybeMessage<Environment>(nullptr);
  }

  Environment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Environment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Environment& from);
  void MergeFrom(const Environment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Environment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fira_message.sim_to_ref.Environment";
  }
  protected:
  explicit Environment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kFieldFieldNumber = 3,
    kStepFieldNumber = 1,
    kGoalsBlueFieldNumber = 4,
    kGoalsYellowFieldNumber = 5,
  };
  // .fira_message.sim_to_ref.Frame frame = 2;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::fira_message::sim_to_ref::Frame& frame() const;
  ::fira_message::sim_to_ref::Frame* release_frame();
  ::fira_message::sim_to_ref::Frame* mutable_frame();
  void set_allocated_frame(::fira_message::sim_to_ref::Frame* frame);
  private:
  const ::fira_message::sim_to_ref::Frame& _internal_frame() const;
  ::fira_message::sim_to_ref::Frame* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::fira_message::sim_to_ref::Frame* frame);
  ::fira_message::sim_to_ref::Frame* unsafe_arena_release_frame();

  // .fira_message.sim_to_ref.Field field = 3;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::fira_message::sim_to_ref::Field& field() const;
  ::fira_message::sim_to_ref::Field* release_field();
  ::fira_message::sim_to_ref::Field* mutable_field();
  void set_allocated_field(::fira_message::sim_to_ref::Field* field);
  private:
  const ::fira_message::sim_to_ref::Field& _internal_field() const;
  ::fira_message::sim_to_ref::Field* _internal_mutable_field();
  public:
  void unsafe_arena_set_allocated_field(
      ::fira_message::sim_to_ref::Field* field);
  ::fira_message::sim_to_ref::Field* unsafe_arena_release_field();

  // uint32 step = 1;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 goals_blue = 4;
  void clear_goals_blue();
  ::PROTOBUF_NAMESPACE_ID::uint32 goals_blue() const;
  void set_goals_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_goals_blue() const;
  void _internal_set_goals_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 goals_yellow = 5;
  void clear_goals_yellow();
  ::PROTOBUF_NAMESPACE_ID::uint32 goals_yellow() const;
  void set_goals_yellow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_goals_yellow() const;
  void _internal_set_goals_yellow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fira_message.sim_to_ref.Environment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fira_message::sim_to_ref::Frame* frame_;
  ::fira_message::sim_to_ref::Field* field_;
  ::PROTOBUF_NAMESPACE_ID::uint32 step_;
  ::PROTOBUF_NAMESPACE_ID::uint32 goals_blue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 goals_yellow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ball

// double x = 1;
inline void Ball::clear_x() {
  x_ = 0;
}
inline double Ball::_internal_x() const {
  return x_;
}
inline double Ball::x() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.x)
  return _internal_x();
}
inline void Ball::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Ball::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.x)
}

// double y = 2;
inline void Ball::clear_y() {
  y_ = 0;
}
inline double Ball::_internal_y() const {
  return y_;
}
inline double Ball::y() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.y)
  return _internal_y();
}
inline void Ball::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Ball::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.y)
}

// double z = 3;
inline void Ball::clear_z() {
  z_ = 0;
}
inline double Ball::_internal_z() const {
  return z_;
}
inline double Ball::z() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.z)
  return _internal_z();
}
inline void Ball::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Ball::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.z)
}

// double vx = 4;
inline void Ball::clear_vx() {
  vx_ = 0;
}
inline double Ball::_internal_vx() const {
  return vx_;
}
inline double Ball::vx() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vx)
  return _internal_vx();
}
inline void Ball::_internal_set_vx(double value) {
  
  vx_ = value;
}
inline void Ball::set_vx(double value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vx)
}

// double vy = 5;
inline void Ball::clear_vy() {
  vy_ = 0;
}
inline double Ball::_internal_vy() const {
  return vy_;
}
inline double Ball::vy() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vy)
  return _internal_vy();
}
inline void Ball::_internal_set_vy(double value) {
  
  vy_ = value;
}
inline void Ball::set_vy(double value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vy)
}

// double vz = 6;
inline void Ball::clear_vz() {
  vz_ = 0;
}
inline double Ball::_internal_vz() const {
  return vz_;
}
inline double Ball::vz() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Ball.vz)
  return _internal_vz();
}
inline void Ball::_internal_set_vz(double value) {
  
  vz_ = value;
}
inline void Ball::set_vz(double value) {
  _internal_set_vz(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Ball.vz)
}

// -------------------------------------------------------------------

// Robot

// uint32 robot_id = 1;
inline void Robot::clear_robot_id() {
  robot_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Robot::_internal_robot_id() const {
  return robot_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Robot::robot_id() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.robot_id)
  return _internal_robot_id();
}
inline void Robot::_internal_set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  robot_id_ = value;
}
inline void Robot::set_robot_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.robot_id)
}

// double x = 2;
inline void Robot::clear_x() {
  x_ = 0;
}
inline double Robot::_internal_x() const {
  return x_;
}
inline double Robot::x() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.x)
  return _internal_x();
}
inline void Robot::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Robot::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.x)
}

// double y = 3;
inline void Robot::clear_y() {
  y_ = 0;
}
inline double Robot::_internal_y() const {
  return y_;
}
inline double Robot::y() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.y)
  return _internal_y();
}
inline void Robot::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Robot::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.y)
}

// double orientation = 4;
inline void Robot::clear_orientation() {
  orientation_ = 0;
}
inline double Robot::_internal_orientation() const {
  return orientation_;
}
inline double Robot::orientation() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.orientation)
  return _internal_orientation();
}
inline void Robot::_internal_set_orientation(double value) {
  
  orientation_ = value;
}
inline void Robot::set_orientation(double value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.orientation)
}

// double vx = 5;
inline void Robot::clear_vx() {
  vx_ = 0;
}
inline double Robot::_internal_vx() const {
  return vx_;
}
inline double Robot::vx() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vx)
  return _internal_vx();
}
inline void Robot::_internal_set_vx(double value) {
  
  vx_ = value;
}
inline void Robot::set_vx(double value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vx)
}

// double vy = 6;
inline void Robot::clear_vy() {
  vy_ = 0;
}
inline double Robot::_internal_vy() const {
  return vy_;
}
inline double Robot::vy() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vy)
  return _internal_vy();
}
inline void Robot::_internal_set_vy(double value) {
  
  vy_ = value;
}
inline void Robot::set_vy(double value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vy)
}

// double vorientation = 7;
inline void Robot::clear_vorientation() {
  vorientation_ = 0;
}
inline double Robot::_internal_vorientation() const {
  return vorientation_;
}
inline double Robot::vorientation() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Robot.vorientation)
  return _internal_vorientation();
}
inline void Robot::_internal_set_vorientation(double value) {
  
  vorientation_ = value;
}
inline void Robot::set_vorientation(double value) {
  _internal_set_vorientation(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Robot.vorientation)
}

// -------------------------------------------------------------------

// Field

// double width = 1;
inline void Field::clear_width() {
  width_ = 0;
}
inline double Field::_internal_width() const {
  return width_;
}
inline double Field::width() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.width)
  return _internal_width();
}
inline void Field::_internal_set_width(double value) {
  
  width_ = value;
}
inline void Field::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.width)
}

// double length = 2;
inline void Field::clear_length() {
  length_ = 0;
}
inline double Field::_internal_length() const {
  return length_;
}
inline double Field::length() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.length)
  return _internal_length();
}
inline void Field::_internal_set_length(double value) {
  
  length_ = value;
}
inline void Field::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.length)
}

// double goal_width = 3;
inline void Field::clear_goal_width() {
  goal_width_ = 0;
}
inline double Field::_internal_goal_width() const {
  return goal_width_;
}
inline double Field::goal_width() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.goal_width)
  return _internal_goal_width();
}
inline void Field::_internal_set_goal_width(double value) {
  
  goal_width_ = value;
}
inline void Field::set_goal_width(double value) {
  _internal_set_goal_width(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.goal_width)
}

// double goal_depth = 4;
inline void Field::clear_goal_depth() {
  goal_depth_ = 0;
}
inline double Field::_internal_goal_depth() const {
  return goal_depth_;
}
inline double Field::goal_depth() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Field.goal_depth)
  return _internal_goal_depth();
}
inline void Field::_internal_set_goal_depth(double value) {
  
  goal_depth_ = value;
}
inline void Field::set_goal_depth(double value) {
  _internal_set_goal_depth(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Field.goal_depth)
}

// -------------------------------------------------------------------

// Frame

// .fira_message.sim_to_ref.Ball ball = 1;
inline bool Frame::_internal_has_ball() const {
  return this != internal_default_instance() && ball_ != nullptr;
}
inline bool Frame::has_ball() const {
  return _internal_has_ball();
}
inline void Frame::clear_ball() {
  if (GetArena() == nullptr && ball_ != nullptr) {
    delete ball_;
  }
  ball_ = nullptr;
}
inline const ::fira_message::sim_to_ref::Ball& Frame::_internal_ball() const {
  const ::fira_message::sim_to_ref::Ball* p = ball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Ball*>(
      &::fira_message::sim_to_ref::_Ball_default_instance_);
}
inline const ::fira_message::sim_to_ref::Ball& Frame::ball() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.ball)
  return _internal_ball();
}
inline void Frame::unsafe_arena_set_allocated_ball(
    ::fira_message::sim_to_ref::Ball* ball) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ball_);
  }
  ball_ = ball;
  if (ball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fira_message.sim_to_ref.Frame.ball)
}
inline ::fira_message::sim_to_ref::Ball* Frame::release_ball() {
  
  ::fira_message::sim_to_ref::Ball* temp = ball_;
  ball_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fira_message::sim_to_ref::Ball* Frame::unsafe_arena_release_ball() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Frame.ball)
  
  ::fira_message::sim_to_ref::Ball* temp = ball_;
  ball_ = nullptr;
  return temp;
}
inline ::fira_message::sim_to_ref::Ball* Frame::_internal_mutable_ball() {
  
  if (ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Ball>(GetArena());
    ball_ = p;
  }
  return ball_;
}
inline ::fira_message::sim_to_ref::Ball* Frame::mutable_ball() {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.ball)
  return _internal_mutable_ball();
}
inline void Frame::set_allocated_ball(::fira_message::sim_to_ref::Ball* ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ball_;
  }
  if (ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ball);
    if (message_arena != submessage_arena) {
      ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    
  } else {
    
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Frame.ball)
}

// repeated .fira_message.sim_to_ref.Robot robots_yellow = 2;
inline int Frame::_internal_robots_yellow_size() const {
  return robots_yellow_.size();
}
inline int Frame::robots_yellow_size() const {
  return _internal_robots_yellow_size();
}
inline void Frame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline ::fira_message::sim_to_ref::Robot* Frame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
Frame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Frame.robots_yellow)
  return &robots_yellow_;
}
inline const ::fira_message::sim_to_ref::Robot& Frame::_internal_robots_yellow(int index) const {
  return robots_yellow_.Get(index);
}
inline const ::fira_message::sim_to_ref::Robot& Frame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.robots_yellow)
  return _internal_robots_yellow(index);
}
inline ::fira_message::sim_to_ref::Robot* Frame::_internal_add_robots_yellow() {
  return robots_yellow_.Add();
}
inline ::fira_message::sim_to_ref::Robot* Frame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Frame.robots_yellow)
  return _internal_add_robots_yellow();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
Frame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Frame.robots_yellow)
  return robots_yellow_;
}

// repeated .fira_message.sim_to_ref.Robot robots_blue = 3;
inline int Frame::_internal_robots_blue_size() const {
  return robots_blue_.size();
}
inline int Frame::robots_blue_size() const {
  return _internal_robots_blue_size();
}
inline void Frame::clear_robots_blue() {
  robots_blue_.Clear();
}
inline ::fira_message::sim_to_ref::Robot* Frame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >*
Frame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Frame.robots_blue)
  return &robots_blue_;
}
inline const ::fira_message::sim_to_ref::Robot& Frame::_internal_robots_blue(int index) const {
  return robots_blue_.Get(index);
}
inline const ::fira_message::sim_to_ref::Robot& Frame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Frame.robots_blue)
  return _internal_robots_blue(index);
}
inline ::fira_message::sim_to_ref::Robot* Frame::_internal_add_robots_blue() {
  return robots_blue_.Add();
}
inline ::fira_message::sim_to_ref::Robot* Frame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Frame.robots_blue)
  return _internal_add_robots_blue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Robot >&
Frame::robots_blue() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Frame.robots_blue)
  return robots_blue_;
}

// -------------------------------------------------------------------

// Command

// uint32 id = 1;
inline void Command::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Command::id() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.id)
  return _internal_id();
}
inline void Command::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Command::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.id)
}

// bool yellowteam = 2;
inline void Command::clear_yellowteam() {
  yellowteam_ = false;
}
inline bool Command::_internal_yellowteam() const {
  return yellowteam_;
}
inline bool Command::yellowteam() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.yellowteam)
  return _internal_yellowteam();
}
inline void Command::_internal_set_yellowteam(bool value) {
  
  yellowteam_ = value;
}
inline void Command::set_yellowteam(bool value) {
  _internal_set_yellowteam(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.yellowteam)
}

// double wheel_left = 6;
inline void Command::clear_wheel_left() {
  wheel_left_ = 0;
}
inline double Command::_internal_wheel_left() const {
  return wheel_left_;
}
inline double Command::wheel_left() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.wheel_left)
  return _internal_wheel_left();
}
inline void Command::_internal_set_wheel_left(double value) {
  
  wheel_left_ = value;
}
inline void Command::set_wheel_left(double value) {
  _internal_set_wheel_left(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.wheel_left)
}

// double wheel_right = 7;
inline void Command::clear_wheel_right() {
  wheel_right_ = 0;
}
inline double Command::_internal_wheel_right() const {
  return wheel_right_;
}
inline double Command::wheel_right() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Command.wheel_right)
  return _internal_wheel_right();
}
inline void Command::_internal_set_wheel_right(double value) {
  
  wheel_right_ = value;
}
inline void Command::set_wheel_right(double value) {
  _internal_set_wheel_right(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Command.wheel_right)
}

// -------------------------------------------------------------------

// Commands

// repeated .fira_message.sim_to_ref.Command robot_commands = 1;
inline int Commands::_internal_robot_commands_size() const {
  return robot_commands_.size();
}
inline int Commands::robot_commands_size() const {
  return _internal_robot_commands_size();
}
inline void Commands::clear_robot_commands() {
  robot_commands_.Clear();
}
inline ::fira_message::sim_to_ref::Command* Commands::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Command >*
Commands::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Commands.robot_commands)
  return &robot_commands_;
}
inline const ::fira_message::sim_to_ref::Command& Commands::_internal_robot_commands(int index) const {
  return robot_commands_.Get(index);
}
inline const ::fira_message::sim_to_ref::Command& Commands::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Commands.robot_commands)
  return _internal_robot_commands(index);
}
inline ::fira_message::sim_to_ref::Command* Commands::_internal_add_robot_commands() {
  return robot_commands_.Add();
}
inline ::fira_message::sim_to_ref::Command* Commands::add_robot_commands() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Commands.robot_commands)
  return _internal_add_robot_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fira_message::sim_to_ref::Command >&
Commands::robot_commands() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Commands.robot_commands)
  return robot_commands_;
}

// -------------------------------------------------------------------

// Packet

// .fira_message.sim_to_ref.Commands cmd = 1;
inline bool Packet::_internal_has_cmd() const {
  return this != internal_default_instance() && cmd_ != nullptr;
}
inline bool Packet::has_cmd() const {
  return _internal_has_cmd();
}
inline void Packet::clear_cmd() {
  if (GetArena() == nullptr && cmd_ != nullptr) {
    delete cmd_;
  }
  cmd_ = nullptr;
}
inline const ::fira_message::sim_to_ref::Commands& Packet::_internal_cmd() const {
  const ::fira_message::sim_to_ref::Commands* p = cmd_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Commands*>(
      &::fira_message::sim_to_ref::_Commands_default_instance_);
}
inline const ::fira_message::sim_to_ref::Commands& Packet::cmd() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Packet.cmd)
  return _internal_cmd();
}
inline void Packet::unsafe_arena_set_allocated_cmd(
    ::fira_message::sim_to_ref::Commands* cmd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_);
  }
  cmd_ = cmd;
  if (cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fira_message.sim_to_ref.Packet.cmd)
}
inline ::fira_message::sim_to_ref::Commands* Packet::release_cmd() {
  
  ::fira_message::sim_to_ref::Commands* temp = cmd_;
  cmd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fira_message::sim_to_ref::Commands* Packet::unsafe_arena_release_cmd() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Packet.cmd)
  
  ::fira_message::sim_to_ref::Commands* temp = cmd_;
  cmd_ = nullptr;
  return temp;
}
inline ::fira_message::sim_to_ref::Commands* Packet::_internal_mutable_cmd() {
  
  if (cmd_ == nullptr) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Commands>(GetArena());
    cmd_ = p;
  }
  return cmd_;
}
inline ::fira_message::sim_to_ref::Commands* Packet::mutable_cmd() {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Packet.cmd)
  return _internal_mutable_cmd();
}
inline void Packet::set_allocated_cmd(::fira_message::sim_to_ref::Commands* cmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cmd_;
  }
  if (cmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cmd);
    if (message_arena != submessage_arena) {
      cmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd, submessage_arena);
    }
    
  } else {
    
  }
  cmd_ = cmd;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Packet.cmd)
}

// -------------------------------------------------------------------

// Environment

// uint32 step = 1;
inline void Environment::clear_step() {
  step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Environment::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Environment::step() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.step)
  return _internal_step();
}
inline void Environment::_internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  step_ = value;
}
inline void Environment::set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.step)
}

// .fira_message.sim_to_ref.Frame frame = 2;
inline bool Environment::_internal_has_frame() const {
  return this != internal_default_instance() && frame_ != nullptr;
}
inline bool Environment::has_frame() const {
  return _internal_has_frame();
}
inline void Environment::clear_frame() {
  if (GetArena() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
}
inline const ::fira_message::sim_to_ref::Frame& Environment::_internal_frame() const {
  const ::fira_message::sim_to_ref::Frame* p = frame_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Frame*>(
      &::fira_message::sim_to_ref::_Frame_default_instance_);
}
inline const ::fira_message::sim_to_ref::Frame& Environment::frame() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.frame)
  return _internal_frame();
}
inline void Environment::unsafe_arena_set_allocated_frame(
    ::fira_message::sim_to_ref::Frame* frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fira_message.sim_to_ref.Environment.frame)
}
inline ::fira_message::sim_to_ref::Frame* Environment::release_frame() {
  
  ::fira_message::sim_to_ref::Frame* temp = frame_;
  frame_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fira_message::sim_to_ref::Frame* Environment::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.frame)
  
  ::fira_message::sim_to_ref::Frame* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::fira_message::sim_to_ref::Frame* Environment::_internal_mutable_frame() {
  
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Frame>(GetArena());
    frame_ = p;
  }
  return frame_;
}
inline ::fira_message::sim_to_ref::Frame* Environment::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.frame)
  return _internal_mutable_frame();
}
inline void Environment::set_allocated_frame(::fira_message::sim_to_ref::Frame* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frame);
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    
  } else {
    
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.frame)
}

// .fira_message.sim_to_ref.Field field = 3;
inline bool Environment::_internal_has_field() const {
  return this != internal_default_instance() && field_ != nullptr;
}
inline bool Environment::has_field() const {
  return _internal_has_field();
}
inline void Environment::clear_field() {
  if (GetArena() == nullptr && field_ != nullptr) {
    delete field_;
  }
  field_ = nullptr;
}
inline const ::fira_message::sim_to_ref::Field& Environment::_internal_field() const {
  const ::fira_message::sim_to_ref::Field* p = field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fira_message::sim_to_ref::Field*>(
      &::fira_message::sim_to_ref::_Field_default_instance_);
}
inline const ::fira_message::sim_to_ref::Field& Environment::field() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.field)
  return _internal_field();
}
inline void Environment::unsafe_arena_set_allocated_field(
    ::fira_message::sim_to_ref::Field* field) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_);
  }
  field_ = field;
  if (field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fira_message.sim_to_ref.Environment.field)
}
inline ::fira_message::sim_to_ref::Field* Environment::release_field() {
  
  ::fira_message::sim_to_ref::Field* temp = field_;
  field_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fira_message::sim_to_ref::Field* Environment::unsafe_arena_release_field() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Environment.field)
  
  ::fira_message::sim_to_ref::Field* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::fira_message::sim_to_ref::Field* Environment::_internal_mutable_field() {
  
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::fira_message::sim_to_ref::Field>(GetArena());
    field_ = p;
  }
  return field_;
}
inline ::fira_message::sim_to_ref::Field* Environment::mutable_field() {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Environment.field)
  return _internal_mutable_field();
}
inline void Environment::set_allocated_field(::fira_message::sim_to_ref::Field* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(field);
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    
  } else {
    
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Environment.field)
}

// uint32 goals_blue = 4;
inline void Environment::clear_goals_blue() {
  goals_blue_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Environment::_internal_goals_blue() const {
  return goals_blue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Environment::goals_blue() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.goals_blue)
  return _internal_goals_blue();
}
inline void Environment::_internal_set_goals_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  goals_blue_ = value;
}
inline void Environment::set_goals_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_goals_blue(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.goals_blue)
}

// uint32 goals_yellow = 5;
inline void Environment::clear_goals_yellow() {
  goals_yellow_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Environment::_internal_goals_yellow() const {
  return goals_yellow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Environment::goals_yellow() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Environment.goals_yellow)
  return _internal_goals_yellow();
}
inline void Environment::_internal_set_goals_yellow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  goals_yellow_ = value;
}
inline void Environment::set_goals_yellow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_goals_yellow(value);
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.Environment.goals_yellow)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
